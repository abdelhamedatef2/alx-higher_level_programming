#How to Use 0-add_integer.py

module that define int add function ``add_integer(a, b=98)``.

#Usage


``add_integer(...)``` returns addition of two args. For nums,
that value is equivalent to using ``+``.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 3)
    7

::

    >>> add_integer(1, -3)
    -2

That function also works with floating-point.

::

    >>> add_integer(2.0, 1.0)
    3

remember that floats are casted to ints before add.

::

    >>> add_integer(1.9, 0.8)
    1

::

    >>> add_integer(-4.1, -0.2)
    -4

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

second arg is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

#Non-Numbers

``add_integer()`` expect that both args either are ints or floats.
If either arg is a non-int and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an int

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an int

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an int

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an int

If both args are non-int and non-floats, a TypeError message is only
printed for the first arg.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
